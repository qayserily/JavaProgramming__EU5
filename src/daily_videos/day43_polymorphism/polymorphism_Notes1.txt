OOP PRINCIPLES
 
POLYMORPHISM
	DEFINITION 
	--	POLYMORPHISM IS THE ABILITY OF THE OBJECT TO TAKE OF MANY FORMS
	--	IT IS WHEN REFERENCE TYPE IS A PARENT CLASS/INTERFACE AND OBJECT TYPE IS CHILD.

	NOTE: POLYMORPHISM ONLY CAN BE IMPLEMENTED WHEN THERE IS A "IS-A" RELATIONSHIP. (INHERITANCE)

	CALLING METHOD IN POLYMORPHISM
	--	WHEN WE CALLED A METHOD, IT WILL CALL OVERRIDDEN VERSION FROM A CLASS, IF WE HAVE OVERRIDDEN THE METHOD
	--	IF METHOD IS NOT OVERRIDDEN, IT WILL CALL PARENT/SUPER CLASS VERSION

	GETMETHODS
	--	getClass() method helps us to access the object information
	--	getClass().getName() returns package.className of the object
	--	getClass().getSimpleName() returns just the class name of the object

	INSTANCEOF OPERATOR
	--	instanceof OPERATOR CAN BE USED TO CHECK IF THE OBJECT IS CERTAIN CLASS
	--	IT PROVIDES YOU JUST TRUE OR FALSE
		Animal a = new Dog();
		if(a instanceof Dog){
			System.out.println ("it is dog")
		}else {
			...
		}

	NOTE: INTERFACES IS SO IMPORTANT. WHY? SINCE IT PROVIDES YOU TO MAKE A POLYMORPHIC RELATIONSHIP WHO HAS PARENT-CHILD RELATION.

	RULES:
		1.	REFERENCE TYPE CAN BE PARENT OR INTERFACE, OBJECT CAN BE ANY EXTENDING OR IMPLEMENTING CHILD CLASS
		2.	REFERENCE TYPE DECIDES WHAT IS ACCESSIBLE
		2.	ALWAYS REFERENCE TYPES DECIDE WHICH METHODS ARE GOING TO IMPLEMENT (MY NOTE)

	CASTING (DOWN-CASTING) (EXPLICTY CASTING THERE IS NO IMPLICITYL CASTING, JAVA DOES NOT DO IT FOR YOU) (THERE IS NO DATA LOSS IN HERE ) (THIS IS SECOND CASTING IN JAVA; FIRST ONE IS PRIMITIVE CASTING AND THIS ONE IS ABOUT NON-PRIMITIVE CASTING) (I WANT TO RUN METHOD WHICH IS IN THE CHILD CLASS CAN NOT BE CALLED) (WHY DOWN CASTING SINCE YOUR OBJECT IS IN THE UP LEVEL --PARENT CLASS-- BUT YOU ONE LEVEL DOWN --CHILD CLASS-- )
	--	INSTRUCTS THE COMPILER TO CHANGE THE EXISTING TYPE OF AN OBJECT REFERENCE TO ANOTHER TYPE